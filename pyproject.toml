[project]
name = "media_only_tg_bot"
version = "1.0.0"
description = "A script for a Telegram bot that deletes non-photo material from a group chat topic."
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "pydantic[email]>=2.9.2",
    "pydantic-settings>=2.6.1",
    "python-telegram-bot>=21.7",
]
[project.optional-dependencies]
lint = [
    "pylint>=3.3.1", # For now - https://github.com/astral-sh/ruff/issues/970
]
test = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-mypy-plugins>=3.1.2",
    "pytest-cov>=6.0.0",
]
dev = [
    "ruff>=0.7.3",
    "mypy>=1.13.0",
    "pre-commit-uv>=4.1.4",
]
[tool.mypy]
plugins = ['pydantic.mypy']

[tool.ruff]
line-length = 100
[tool.ruff.lint.pycodestyle]
max-doc-length = 100
[tool.ruff.lint]
select = ["I", "D"]
# These rules conflict with some other rules
ignore = ["D203", "D213"]
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "module"

[tool.tox]
min_version = "4.23.2"
env_list = ["py312", "lint", "type", "fix"]
requires = ["tox-uv>=1.16.0"]
isolated_build = true

[tool.tox.env.default]
runner = "uv-venv-lock-runner"
description = "run unit tests"
deps = [
    "pytest>=8.3.3",
    "pytest-cov>=6.0.0",
]
allowlist_externals = ["pytest"]
commands = ["pytest {posargs:tests} --cov --cov-report=xml:coverage.xml"]

[tool.tox.env.lint]
description = "run linters"
skip_install = true
deps = ["ruff>=0.7.4"]
allowlist_externals = ["ruff"]
commands = [
    "ruff check {posargs:.}",
    "ruff format --check {posargs:.}",
]

[tool.tox.env.type]
runner = "uv-venv-lock-runner"
description = "run type checks"
deps = ["mypy>=1.13.0"]
allowlist_externals = ["mypy"]
commands = ["mypy {posargs:src tests}"]

[tool.tox.env.fix]
description = "run code formatter and linter (auto-fix)"
skip_install = true
deps = ["pre-commit-uv>=4.1.1"]
allowlist_externals = ["pre-commit"]
commands = ["pre-commit run --all-files --show-diff-on-failure"]

[tool.tox.env.dev]
runner = "uv-venv-lock-runner"
description = "dev environment"
extras = ["dev", "test", "type"]

allowlist_externals = ["pytest"]
commands = [
    "uv pip tree",
    "pytest {posargs:tests} --cov=src --cov-report=xml"
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
]